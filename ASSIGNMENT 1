{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOv8caxdrecdeRwQN8MNWYY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/YashBhanushali9/Advance-Machine-Learning/blob/main/ASSIGNMENT%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "7bNfaIgSHNy1"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "#Data is being imported and using 10K most frequently used words from the total 85K words.\n"
      ],
      "metadata": {
        "id": "iRQrmkB-HUf1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.datasets import imdb\n",
        "\n",
        "(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)\n"
      ],
      "metadata": {
        "id": "BtkET5p5HZh-"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The variables train_data and test_data are lists of reviews, each review being a list of word indices (encoding a sequence of words). train_labels and test_labels are lists of 0s and 1s, where 0 stands for \"negative\" and 1 stands for \"positive\":"
      ],
      "metadata": {
        "id": "PhXN5EjKHnZt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "#Following is one of the reviews from the training data which currently is in form of an array of digits. Taking the review n786 for our example"
      ],
      "metadata": {
        "id": "07yrza6DHtDJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_data[786]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_VdaqjcuH2e2",
        "outputId": "9b5c1b32-e001-4d2c-f3ed-c820ad6fbc8c"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1,\n",
              " 76,\n",
              " 17,\n",
              " 75,\n",
              " 32,\n",
              " 119,\n",
              " 1540,\n",
              " 2792,\n",
              " 12,\n",
              " 16,\n",
              " 1350,\n",
              " 8,\n",
              " 67,\n",
              " 90,\n",
              " 11,\n",
              " 14,\n",
              " 20,\n",
              " 6,\n",
              " 5813,\n",
              " 5619,\n",
              " 33,\n",
              " 4,\n",
              " 2,\n",
              " 277,\n",
              " 7,\n",
              " 51,\n",
              " 186,\n",
              " 8,\n",
              " 28,\n",
              " 280,\n",
              " 77,\n",
              " 6,\n",
              " 9133,\n",
              " 5,\n",
              " 8161,\n",
              " 611,\n",
              " 2792,\n",
              " 299,\n",
              " 27,\n",
              " 173,\n",
              " 267,\n",
              " 40,\n",
              " 35,\n",
              " 2,\n",
              " 1445,\n",
              " 5,\n",
              " 2,\n",
              " 316,\n",
              " 19,\n",
              " 6,\n",
              " 484,\n",
              " 6514,\n",
              " 5,\n",
              " 5562,\n",
              " 2929,\n",
              " 1191,\n",
              " 10,\n",
              " 10,\n",
              " 4,\n",
              " 114,\n",
              " 2,\n",
              " 46,\n",
              " 14,\n",
              " 96,\n",
              " 5,\n",
              " 15,\n",
              " 19,\n",
              " 38,\n",
              " 111,\n",
              " 1888,\n",
              " 630,\n",
              " 5,\n",
              " 2,\n",
              " 15,\n",
              " 4,\n",
              " 330,\n",
              " 2,\n",
              " 5,\n",
              " 95,\n",
              " 2,\n",
              " 10,\n",
              " 10,\n",
              " 2508,\n",
              " 5558,\n",
              " 9,\n",
              " 50,\n",
              " 24,\n",
              " 399,\n",
              " 76,\n",
              " 41,\n",
              " 139,\n",
              " 19,\n",
              " 2792,\n",
              " 26,\n",
              " 1035,\n",
              " 5,\n",
              " 2631,\n",
              " 254,\n",
              " 8,\n",
              " 264,\n",
              " 36,\n",
              " 981,\n",
              " 6,\n",
              " 176,\n",
              " 8,\n",
              " 257,\n",
              " 85,\n",
              " 225,\n",
              " 57,\n",
              " 1708,\n",
              " 50,\n",
              " 10,\n",
              " 10,\n",
              " 3384,\n",
              " 2,\n",
              " 23,\n",
              " 4,\n",
              " 85,\n",
              " 508,\n",
              " 3990,\n",
              " 56,\n",
              " 4,\n",
              " 268,\n",
              " 59,\n",
              " 16,\n",
              " 5318,\n",
              " 5,\n",
              " 41,\n",
              " 139,\n",
              " 19,\n",
              " 2792,\n",
              " 71,\n",
              " 34,\n",
              " 230,\n",
              " 4,\n",
              " 91,\n",
              " 221,\n",
              " 11,\n",
              " 4,\n",
              " 20,\n",
              " 21,\n",
              " 24,\n",
              " 195,\n",
              " 8,\n",
              " 607,\n",
              " 1540,\n",
              " 39,\n",
              " 4467]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Let's check the label of the above review to see if it is positive or negative."
      ],
      "metadata": {
        "id": "KmmA8vzDIArY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_labels[786]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xBUq8pqOIBu3",
        "outputId": "5b67df74-f258-45ad-9230-4ef1f7d5829b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# So, this is a Negative review as it is labeled as 0."
      ],
      "metadata": {
        "id": "WpxhvdCgIIgb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Since we restricted ourselves to the top 10,000 most frequent words among 85,500 words availabele, no word index will \n",
        "# exceed 10,000:\n",
        "max([max(sequence) for sequence in train_data])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G4TgWPFlJHXG",
        "outputId": "0f7bf215-e4af-4158-e0e9-0524c80c1a33"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "9999"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "hjxq8LraINA_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Let'sdecode one of these reviews back to English words:\n",
        "# word_index is a dictionary mapping words to an integer index\n",
        "word_index = imdb.get_word_index()\n",
        "# We reverse it, mapping integer indices to words\n",
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "# We decode the review; note that our indices were offset by 3\n",
        "# because 0, 1 and 2 are reserved indices for \"padding\", \"start of sequence\", and \"unknown\".\n",
        "decoded_review = ' '.join([reverse_word_index.get(i - 3, '?') for i in train_data[786]])"
      ],
      "metadata": {
        "id": "RjJE6nJTJfpO"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "decoded_review\n",
        "\n",
        "# We saw that this was a Negative review as it was labeled as '0' and I'm sure that it's labeled correctly after going\n",
        "# through the decoded review as below.Lol"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        },
        "id": "AYzz5QOQJoUR",
        "outputId": "3760ce01-737a-4980-e995-fef57786272a"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"? much as we all love al pacino it was painful to see him in this movie a publicity hack at the ? ending of what seems to have once been a distinguished and idealistic career pacino plays his part looking like an ? bed and ? everyone with a totally bogus and inconsistent southern accent br br the plot ? out this way and that with so many loose ends and ? that the mind ? and then ? br br kim basinger is there not doing much her scenes with pacino are flat and unconvincing hard to believe they meant a lot to each other there's no energy there br br tea ? on the other hand lit up the screen she was electric and her scenes with pacino were by far the most interesting in the movie but not enough to save al from embarrassment\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "def vectorize_sequences(sequences, dimension=10000):\n",
        "    # Create an all-zero matrix of shape (len(sequences), dimension)\n",
        "    results = np.zeros((len(sequences), dimension))\n",
        "    for i, sequence in enumerate(sequences):\n",
        "        results[i, sequence] = 1.  # set specific indices of results[i] to 1s\n",
        "    return results\n",
        "\n",
        "# Our vectorized training data\n",
        "x_train = vectorize_sequences(train_data)\n",
        "# Our vectorized test data\n",
        "x_test = vectorize_sequences(test_data)\n",
        "\n"
      ],
      "metadata": {
        "id": "epoZQnd5LXe7"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Let's see a reveiw that is one-hot-encoded\n",
        "\n",
        "x_train[786]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WeZYZ8qwLm3q",
        "outputId": "94c2b868-83cb-4720-ec54-3335e8a280ed"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 1., 1., ..., 0., 0., 0.])"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Vectorizing the labels\n",
        "\n",
        "y_train = np.asarray(train_labels).astype('float32')\n",
        "y_test = np.asarray(test_labels).astype('float32')"
      ],
      "metadata": {
        "id": "pSmHJzuGL-jz"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Building the network\n",
        "\n",
        "Our input data is simply vectors, and our labels are scalars (1s and 0s). A type of network that performs well on such a problem would be a simple stack of fully-connected (Dense) layers with relu activations: Dense(16, activation='relu')\n",
        "\n",
        "Having 16 hidden units means that the weight matrix W will have shape (input_dimension, 16), i.e. the dot product with W will project the input data onto a 16-dimensional representation space (and then we would add the bias vector b and apply the relu operation). We can intuitively understand the dimensionality of our representation space as \"how much freedom we are allowing the network to have when learning internal representations\". Having more hidden units (a higher-dimensional representation space) allows our network to learn more complex representations, but it makes your network more computationally expensive and may lead to learning unwanted patterns (patterns that will improve performance on the training data but not on the test data)."
      ],
      "metadata": {
        "id": "opnXYUmMMW87"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))"
      ],
      "metadata": {
        "id": "o_PUzJeKMcMd"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Loss funtion\n",
        "# Since we are facing a binary classification problem and the output of our network is a probability (we end our network\n",
        "# with a single-unit layer with a sigmoid activation), is it best to use the binary_crossentropy loss. It isn't the only \n",
        "# viable choice: you could use, for instance, mean_squared_error. But crossentropy is usually the best choice when you are\n",
        "# dealing with models that output probabilities. Crossentropy is a quantity from the field of Information Theory, that \n",
        "# measures the \"distance\" between probability distributions, or in our case, between the ground-truth distribution and \n",
        "# our predictions.\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "nZDdvJRXMlWC"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])"
      ],
      "metadata": {
        "id": "kKGTfu6GMxBy"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Validating our approach In order to monitor during training the accuracy of the model on data that it has never seen before, we will create a \"validation set\" by setting apart 10,000 samples from the original training data:"
      ],
      "metadata": {
        "id": "fdhB4MVkM3Xu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]"
      ],
      "metadata": {
        "id": "JML9RUVNNfR7"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We will now train our model for 20 epochs (20 iterations over all samples in the x_train and y_train tensors), in mini-batches of 512 samples. At this same time we will monitor loss and accuracy on the 10,000 samples that we set apart. This is done by passing the validation data as the validation_data argument:"
      ],
      "metadata": {
        "id": "5U7XiypSNu8f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_o4AVpGNv1Q",
        "outputId": "67d75e02-3c0b-4944-e430-6d7f11c372fc"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 4s 45ms/step - loss: 0.5063 - binary_accuracy: 0.7839 - val_loss: 0.3858 - val_binary_accuracy: 0.8611\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.3023 - binary_accuracy: 0.9021 - val_loss: 0.3025 - val_binary_accuracy: 0.8860\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.2148 - binary_accuracy: 0.9301 - val_loss: 0.2833 - val_binary_accuracy: 0.8860\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.1714 - binary_accuracy: 0.9423 - val_loss: 0.2923 - val_binary_accuracy: 0.8831\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.1377 - binary_accuracy: 0.9563 - val_loss: 0.2970 - val_binary_accuracy: 0.8808\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.1137 - binary_accuracy: 0.9648 - val_loss: 0.3049 - val_binary_accuracy: 0.8830\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0946 - binary_accuracy: 0.9729 - val_loss: 0.3156 - val_binary_accuracy: 0.8814\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0770 - binary_accuracy: 0.9790 - val_loss: 0.3390 - val_binary_accuracy: 0.8805\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0589 - binary_accuracy: 0.9853 - val_loss: 0.4074 - val_binary_accuracy: 0.8709\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0492 - binary_accuracy: 0.9885 - val_loss: 0.3902 - val_binary_accuracy: 0.8776\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0406 - binary_accuracy: 0.9902 - val_loss: 0.4314 - val_binary_accuracy: 0.8749\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0312 - binary_accuracy: 0.9936 - val_loss: 0.4562 - val_binary_accuracy: 0.8756\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0223 - binary_accuracy: 0.9963 - val_loss: 0.4796 - val_binary_accuracy: 0.8711\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0184 - binary_accuracy: 0.9973 - val_loss: 0.5512 - val_binary_accuracy: 0.8690\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0149 - binary_accuracy: 0.9979 - val_loss: 0.5496 - val_binary_accuracy: 0.8706\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0081 - binary_accuracy: 0.9996 - val_loss: 0.6565 - val_binary_accuracy: 0.8524\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0087 - binary_accuracy: 0.9992 - val_loss: 0.6316 - val_binary_accuracy: 0.8680\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0042 - binary_accuracy: 0.9998 - val_loss: 0.7041 - val_binary_accuracy: 0.8583\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 31ms/step - loss: 0.0044 - binary_accuracy: 0.9999 - val_loss: 0.7013 - val_binary_accuracy: 0.8647\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0031 - binary_accuracy: 0.9998 - val_loss: 0.7422 - val_binary_accuracy: 0.8649\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history_dict = history.history\n",
        "history_dict.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kbw_kSI-Rdv9",
        "outputId": "ee84bb3f-122f-45e4-f34c-a54f7bffd8f6"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['loss', 'binary_accuracy', 'val_loss', 'val_binary_accuracy'])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "LhMsuNGaRmYW",
        "outputId": "60f113b0-c6db-4fcd-e9a4-ad2c273abd35"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "ihSkYMsURys1",
        "outputId": "4cc0f6e2-acca-4d72-f837-1c32cbbe9fdf"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deZgU1dn38e/NoCCL7G7sKooQHJYRjStqNLgEFCVA0IgYjWQxmBijMVFiYvSJvkZJfHyCu5EIGpdgRI2IqBGNDCgICAqyCCJBFARHlmHu949TPfQMNTM9S3fP8vtcV11dXevdNT1196lz6pS5OyIiIqU1ynYAIiJSOylBiIhILCUIERGJpQQhIiKxlCBERCSWEoSIiMRSgpAymdlzZnZRTS+bTWa20sy+kYbtzjKz70Xjo83sX6ksW4X9dDGzrWaWU9VYRVKlBFHPRCePxFBkZl8lvR9dmW25+xnu/lBNL1sbmdk1ZvZqzPT2ZrbDzL6W6rbcfbK7n15DcZVIaO6+2t1buPuumth+zP7MzD40s8Xp2L7ULUoQ9Ux08mjh7i2A1cC3kqZNTixnZo2zF2Wt9AhwrJl1LzV9JPCuuy/MQkzZcCKwH3CwmR2VyR3rO1n7KEE0EGY2yMzWmNkvzOwT4AEza2Nm/zSzDWb2eTTeKWmd5MsmY8zs32Z2W7TsCjM7o4rLdjezV81si5nNMLO7zOyRMuJOJcbfmtnr0fb+ZWbtk+ZfaGarzGyjmV1X1vFx9zXATODCUrO+CzxcURylYh5jZv9Oen+amS0xs81m9mfAkuYdYmYzo/g+NbPJZtY6mvdXoAvwTFQCvNrMupmZJ06mZnaQmU0zs8/MbJmZXZq07Qlm9piZPRwdm0VmllfWMYhcBPwDmB6NJ3+u3mb2YrSv9Wb2y2h6jpn90syWR/uZa2adS8caLVv6e/K6mf3RzDYCE8o7HtE6nc3syejvsDE6nol5l5rZe1EMi82sv5n93MyeKPU5JprZnRUcB0EJoqE5AGgLdAUuI/z9H4jedwG+Av5c5tpwNLAUaA/8AbjPzKwKy/4NeAtoB0xgz5NyslRi/A5wMeGX797AVQBm1gu4O9r+QdH+Yk/qkYeSYzGzw4G+UbyVPVaJbbQHngR+RTgWy4HjkhcBbo7iOwLoTDgmuPuFlCwF/iFmF1OANdH65wO/N7NTkuYPiZZpDUwrL2YzaxZtY3I0jDSzvaN5LYEZwPPRvg4FXopW/SkwCjgT2BcYCxSUe2B2Oxr4ENgfuKm842Gh3uWfwCqgG9Ax+myY2fBoue9GMQwBNhJKhoOTkm5jQqnw4RTja9jcXUM9HYCVwDei8UHADqBpOcv3BT5Pej8L+F40PgZYljSvGeDAAZVZlnByLQSaJc1/BHgkxc8UF+Ovkt7/AHg+Gr8emJI0r3l0DL5RxrabAV8Ax0bvbwL+UcVj9e9o/LvAm0nLGeGE/r0ytnsO8Hbc3zB63y06lo0JJ89dQMuk+TcDD0bjE4AZSfN6AV+Vc2wvADZE224KbAbOjeaNSo6r1HpLgaEx04tjLec4ra7g7118PICvJ+KLWe4F4CdlbOM54NJo/Gxgcab+B+v6oBJEw7LB3bcl3phZMzP7S3QJ5gvgVaC1ld1C5pPEiLsnfiG2qOSyBwGfJU0D+KisgFOM8ZOk8YKkmA5K3ra7f0n4VRkriulx4LtRaWc00S/NKhyrhNIxePJ7M9vfzKaY2dpou48QShqpSBzLLUnTVhF+WSeUPjZNrexr/RcBj7l7YfQ9eYLdl5k6E0o/ccqbV5ESf/sKjkdnYJW7F1YyhocIyY/o9a9VjLXBUYJoWEp33fsz4HDgaHffl1BBCUnXyNNgHdA2upyR0Lmc5asT47rkbUf7bFfBOg8B3wZOA1oCz1QzjtIxGCU/7+8Jf5c+0XYvKLXN8rpb/phwLFsmTesCrK0gpj1E9SmnABeY2ScW6qnOB86MLpN9BBxcxuofAYfETP8yek3+Wx9QapnSn6+84/ER0KWMBFdWDABPA0daaIl2NuHymaRACaJha0m4lr7JzNoCN6R7h+6+CsgnVEjubWZfB76Vphj/DpxtZsdH19JvpOLv/GvAJmAS4fLUjmrG8SzQ28yGRSe2Kyh5kmwJbAU2m1lH4Oel1l9PGSdmd/8ImA3cbGZNzexI4BLCr+7KuhB4n5AE+0bDYYTLYaMI1/4PNLPxZtbEzFqa2dHRuvcCvzWzHhYcaWbt3H0DIVldEFVkj6Xsk3hCecfjLULCvcXMmkefOVGfcy9wlZkNiGI41My6RsdpG+G78DfgLXdfXYXj0yApQTRsdwD7AJ8CbxIqIDNhNOF68kbgd8BUYHsZy1Y5RndfBPyQcGJYB3xOOOGVt44TLit1pWRFZpXicPdPgeHALYTP2wN4PWmR3wD9Cdf7nyVUaCe7GfiVmW0ys6tidjGKcK3/Y+Ap4AZ3n5FKbKVcBPyvu3+SPAD/B1wUXcY6jZDMPwE+AE6O1r0deAz4F6EO5z7CsQK4lHCS3wj0JiS08pR5PDzc+/EtQgX5asLfckQ073FCndHfgC2EUkPbpO0+BPRBl5cqxaKKG5GsMbOpwBJ3T3sJRhomM+sCLCE0qvgi2/HUFSpBSMaZ2VFRe/dGZjYYGEr4xSdS48ysEaEp7hQlh8rRnYuSDQcQLh20I1wmGOfub2c3JKmPzKw5oR5nFTA4y+HUObrEJCIisXSJSUREYtWbS0zt27f3bt26ZTsMEZE6Ze7cuZ+6e4e4efUmQXTr1o38/PxshyEiUqeY2aqy5ukSk4iIxFKCEBGRWEoQIiISSwlCRERiKUGIiEistCUIM7vfzP5rZrHP8o16XJxo4TGJC8ysf9K8i8zsg2i4KG59EZEGb/Jk6NYNGjUKr5NrtifzdJYgHqT8W9vPIPRs2YPw+Mu7AZK6Uj4aGAjcYGZt0hiniDRU1T3BZnP9yZPhsstg1SpwD6+XXVazSSKdj6sjdEO8sIx5fwFGJb1fChxI6L74L2UtV9YwYMAAF5EG5pFH3Lt2dTcLr488Url1mzVzD6fXMDRrlvo2sr1+164l100MXbumtn4EyPda+MjRjpR83OCaaFpZ0/dgZpeZWb6Z5W/YsCFtgYpILVTdX9DXXQcFBSWnFRSE6XVh/dVlPPeorOlVUKcrqd19krvnuXtehw6xd4qLSDpl8xJLtk+w2V6/S5fKTa+CbCaItZR8Nm+naFpZ00WkNqnuL/jqrp/tE2y217/pJmjWrOS0Zs3C9JpS1rWnmhgovw7iLOA5wgPJjyE8KxbCYwJXAG2iYQXQtqJ9qQ5CpAqqcw2/utfAs71+tusQqrt+YhtV/ftFKKcOIp3J4VHCc4B3EuoRLgEuBy6P5htwF7AceBfIS1p3LLAsGi5OZX9KECKVVN0TlFn8CdosM+vXhhNsttevAVlJEJkelCCkQWrIJQD3WnGCrevKSxB1upJapEHL9jX86l4Dr4lr6KNHw8qVUFQUXkePTn1dqZAShEg2ZbMVT3UrSUePhkmToGtXMAuvkyalfpKu7vqSdvXmmdR5eXmuBwZJnZIoASSf5Js1S/0k2ahRKDmUZhZ+Uad7/1IvmNlcd8+Lm6cShEh1NOQSgNR7ShAiVVXX6wBA1/ClXEoQIlWlEoDUc0oQ0rBV5xKRSgBSzylBSMNV3UtEKgFIPadWTNJwdesWkkJpXbuGX+MVUSsgqQfUikkkTnUvEakEIPVc42wHIJI1XbrElyAq013y6NFKCFJvqQQhdVt1Kpkz0V2ySB2mBCF1V3UrmXWJSKRcqqSWuqu6lcwiokpqqacy8ExekYZMCULqrgw8k1ekIVOCkOxSJbNIraUEIdmjSmaRWk2V1JI9qmQWyTpVUkvtpEpmkVpNCUKyR5XMIrWaEoRUjyqZReotJQipOlUyi9RrqqSWqlMls0idp0pqSQ9VMovUa0oQUnWqZBap15QgpOpUySxSrylBSNWpklmkXlOCaOiq00wVQjJYuRKKisKrkoNIvZHWBGFmg81sqZktM7NrYuZ3NbOXzGyBmc0ys05J83aZ2TvRMC2dcTZY1W2mKiL1WtqauZpZDvA+cBqwBpgDjHL3xUnLPA78090fMrNTgIvd/cJo3lZ3b5Hq/tTMtQrUTFWkwctWM9eBwDJ3/9DddwBTgKGllukFzIzGX46ZL+mkZqoiUo50JoiOwEdJ79dE05LNB4ZF4+cCLc2sXfS+qZnlm9mbZnZO3A7M7LJomfwNGzbUZOwNg5qpikg5sl1JfRVwkpm9DZwErAV2RfO6RsWe7wB3mNkhpVd290nunufueR06dMhY0PWGmqmKSDnSmSDWAp2T3neKphVz94/dfZi79wOui6Ztil7XRq8fArOAfmmMtWFSM1URKUc6E8QcoIeZdTezvYGRQInWSGbW3swSMVwL3B9Nb2NmTRLLAMcBi5Gap2aqIlKGtCUIdy8EfgS8ALwHPObui8zsRjMbEi02CFhqZu8D+wOJaxtHAPlmNp9QeX1LcusnERFJP/XmWtdNngzXXRdaHnXpEuoPVAoQkRSV18y1caaDkRqUuNGtoCC8T9zoBkoSIlJt2W7FJNVx3XW7k0NCQUGYLiJSTUoQdZludBORNFKCqMt0o5uIpJESRF2mG91EJI2UIOoy3egmImmkVkx13ejRSggikhYqQYiISCwlCBERiaUEISIisZQgREQklhJEtk2eHB792ahReNXzoEWkllArpmxSX0oiUoupBJFN6ktJRGoxJYhsUl9KIlKLKUFkk/pSEpFaTAkim9SXkojUYkoQ2aS+lESkFlMrpmxTX0oiUkupBCEiIrGUIEREJJYShIiIxFKCEBGRWEoQIiISSwlCRERiKUGIiEgsJQgREYmlBCEiIrGUIEREJFZaE4SZDTazpWa2zMyuiZnf1cxeMrMFZjbLzDolzbvIzD6IhovSGaeIiOwpbQnCzHKAu4AzgF7AKDPrVWqx24CH3f1I4Ebg5mjdtsANwNHAQOAGM2uTrlhFRGRP6SxBDASWufuH7r4DmAIMLbVML2BmNP5y0vxvAi+6+2fu/jnwIjA4jbFWnZ4pLSL1VDoTREfgo6T3a6JpyeYDw6Lxc4GWZtYuxXUxs8vMLN/M8jds2FBjgacs8UzpVavAffczpZUkRKQeyHYl9VXASWb2NnASsBbYlerK7j7J3fPcPa9Dhw7pirFseqa0iNRj6XwexFqgc9L7TtG0Yu7+MVEJwsxaAOe5+yYzWwsMKrXurDTGWjV6prSI1GMVliDM7FtmVpWSxhygh5l1N7O9gZHAtFLbbp+07WuB+6PxF4DTzaxNVDl9ejStdtEzpUWkHkvlxD8C+MDM/mBmPVPdsLsXAj8inNjfAx5z90VmdqOZDYkWGwQsNbP3gf2Bm6J1PwN+S0gyc4Abo2m1i54pLSL1mLl7xQuZ7QuMAi4GHHgAeNTdt6Q3vNTl5eV5fn5+5nc8eXKoc1i9OpQcbrpJjxAVkTrDzOa6e17svFQSRLSRdsCFwHhCieBQYKK7/6mmAq2OrCUIEZE6rLwEUWEldXQ56GJCQngYGOju/zWzZsBioFYkiDpl+3Z4/31YvBgWLYKlS2HXLmjaFPbZZ8/XuGmlX9u3hw4dICcn259OROqJVFoxnQf80d1fTZ7o7gVmdkl6wqontm8PJ/9EIki8LlsWEgKEG+y6d4cmTeCrr2DbtjAkxiujUSPYbz844IDdw4EHxo+3bFnzn1dE6pVUEsQEYF3ijZntA+zv7ivd/aV0BVanbN8OS5bEJ4KiorBMTg4ceij06gXDh4fXXr3g8MNDKSCOe9h2csKIey0ogE8/hU8+CcO6deF14cLwWli457abNy+ZSFq0gL33Tn1o0qTk+w4doHNnaNsWzNJ3rEUkY1JJEI8Dxya93xVNOyotEdU169ZB//7hRAwhEfToAV/7GowYEZJA795w2GHhpFoZZiF5NG0KrVtXLb6iIvjss93JIzmBJMYXLw6JZvt22LFj97B9e+X316xZSBSlhy5ddo+3aFG1zyIiGZVKgmgc9aUEgLvviO5rEIDrr4eNG+Hhh6Ffv5AcKpsI0qlRo1A/0b59SFqV4R4uhSUnjOQEkhi2bYP16+Gjj3YPq1fD88+HJFS6IUTr1nsmjr33hp0744fCwrLn7dwZYjzySDj/fDjmmPCZRaTaUkkQG8xsiLtPAzCzocCn6Q2rjnj3Xbj/fvjJT+DCC7MdTc0zg8aNw1D6fo9U7dgBH3+8Z/JIjP/nPyHBlt7vXnvtHho3Lvm+9HSAu+6CP/4RDjoIzjsvJIvjjlOlvUg1VNjM1cwOASYDBwFG6ETvu+6+LP3hpS4rzVzPOAPefBOWLw/X3qVqvvoqlBISJ/6qnNQ3b4Z//hOeeAKeey6UavbbD4YNC8nipJNCQhGREmrqPogWAO6+tQZjqzEZTxAvvginnw633QY/+1nm9isV27oVpk+Hv/8dnn02VOK3awfnnhtKF6ecEi5piUj1E4SZnQX0Boqb27j7jTUWYQ3IaILYtQsGDAi/WpcsqV11DlJSQQG88EJIFs88A1u2hDqQoUNDsjjttLJbkYk0AOUliFQ66/s/Qn9MPyZcYhoOdK3RCOuaRx6B+fPh5puVHGq7Zs1CyWHyZPjvf2HaNBgyBP7xj/C6336ha5SFC7MdqUitk0odxAJ3PzLptQXwnLufkJkQU5OxEkRBQWiy2rFjqH9Qm/+6accOmDkzlCyeeCLUT7z2GvRMuT/KmvHVV3D55bBgQWh9lZNT8jVuWtw8CK3FEkNRUeXet20bbtjs1i28du8OXbuGu/SlXqtWVxtA4nbeAjM7CNgIHFhTwdU5f/wjrF0Ljz6q5FCX7b03DB4chl/8Ao4/Plxuev31zHXXvn17qEB/7rkQR6NG4cS9a1fJ18LCPaclXhPjEL6PZmE7ifFU3puFFnnPPLPnvS8HHLA7YZROIJ07725FJvVSKgniGTNrDdwKzCP05npPWqOqrdavh1tugXPOgRNqVQFKqqNHj1BPMWhQSBKvvRYuPaXTzp0wcmSoTP/LX8KjarOtqCjct7JiRRhWrtw9Pns2TJ26OxlBSDSdOoVkceihoVeAww8PJexDDlHyqAfKvcQUPcznGHefHb1vAjR1980Zii9lGbnE9IMfwD33hG40DjssvfuSzPv3v0PLtJ494eWXoVWr9Oxn165Q7zF1Ktx5J1xxRXr2U9MKC8O9K8mJIzF88AEkPxc+JwcOPnh30kge9ttPpe9apFqtmMzsbXfvl5bIalDaE8SSJeFO5Msvhz//OX37kex67rlQeX3sseFO8Jq+Bl9UBBdfHO68/8Mf4Oc/r9ntZ9Pnn4deipcuLTl88EHJS1etWoUfWKUTR48eqvPIguomiNuAN4AnPdWbJrIg7Qli6NDwq3L58tAxndRfU6bAd74DZ50FTz5Zc5dK3MMPjEmT4De/Cd20NAS7doW75+OSx5o1u5czC/U/ccmjUyd1oZIm1a2k/j7wU6DQzLYRmrq6u+9bgzHWbq+8EppH/v73Sg4NwciR4dfwD36w+9d+dU9O7jB+fEgO114Lv/51zcRaF+Tk7K7Y/uY3S8778stQwiidOB58MNzwmLDPPiFxxCWPfcs4Fe3atWf3+aVfE+P77hu23bVr3bzj3j0tl+1SvpO6tktbCaKoCI4+OlTevf++isANye9/Hx4n++Mfh7qCqv4DusM114RLSuPHw+236xp8RdxDT8OJhJFc+lixYnc3+hBaWrVqtWcC2Lmz8vvda69Qd3LYYeGSVyIp9egR+vmqTaWYL78MLc+mTg3npb/9rUqbqe4T5U6Mm176AUL11pQpkJ8ffkUqOTQs114bOhK8/fZwn8CECVXbzm9+E5LDuHFKDqkyCyfkgw6Ck08uOW/79nCpN7nEUVBQ8VMXy3tN1J988EF4ff/90J1O8kO7mjULrbWSk0ZivF27zPxdt20L9WRTpoS+xwoKwoPAvvvdtOwulTqIZ5LeNgUGAnPd/ZS0RFRFaSlBbNsWWrS0bRuSRG369SCZ4Q6XXAIPPFC1Fkf/8z+h9HDxxXDvvfoO1SVFReGep0TCSE4eK1aUfBDXAQeEhg3HHRde+/WruV4WduwIyWrqVHj66dBdTPv24cFjI0aEe3iq0WtxtUoQ7v6tUhvrDNxR5Wjqkj/9CVatCl166x+7YTIL9QabNoVu3du0Sb1r9zvvDMlh1KjQPFrfobqlUaPdzy059dSS83buDM19Ewlj3rxwr8iTT4b5TZrAUUeFZJEYKlN/WVgIs2aFksKTT4YSTuvWISmMHBlKVRmoK6l0HYSZGbDI3XulJ6SqqfESxMaN4Waf444LPYJKw7ZtG5x9dvinffLJ0BS2PH/5S2ixNGxY+OVXFys+pfLWrYM33gjJ4vXXYe7c3XUhPXqULGUccUTJHw1FReFenKlT4fHHw30lLVuGFpQjRoR7dNLQC3F1m7n+iXD3NITO/foCK939ghqNsppqPEGMHx9KEAsWhEeGimzZEn5JLlgQ7pEYNCh+uYcegjFjdjeTVdfiDde2bSFJvP56SBqzZ+++obB1a/j610Oy2LgxJIW1a0O9yLe+FZLCGWekve6zugnioqS3hYTk8HoNxlcjajRBLFsWsvvYseGXoEjCxo1w4onhjuKXXw7dviebMiXcJX3qqaFptLoSl2TuoYI9OWEsWhRaT51xRrh8dPbZGX1ue3UTRHNgm7vvit7nAE3cvaDGI62GGk0Qw4eHlgLLloXKJ5Fka9eGywRfflmyB9inngrfneOPD30sVfUxrdKwbN4cLjW1bJmV3VfreRDAS0ByGWcfYEZNBFYrzZ4duoC++molB4nXsWNoVdKoUejcb/XqkBBGjICBA0PbdCUHSVWrVllLDhVJpeasafJjRt19q5nVz2+/O1x1VWhXrMeISnmSe4A96aRQOXnkkaHkWUv/2UUqK5USxJdm1j/xxswGAF+lL6QseuKJ0ALht7+F5s2zHY3Udn37hpuV1q8PXT688EL6eoAVyYJU6iCOAqYAHxP6YToAGOHucyvcuNlg4E4gB7jX3W8pNb8L8BDQOlrmGnefbmbdgPeApdGib7r75eXtq9p1EDt2QK9eocXAO+9U68YTaWA++ijcTKkfFVIHVfdGuTlm1hM4PJq01N0r7OQkqsy+CzgNWAPMMbNp7r44abFfAY+5+91m1guYDnSL5i13974V7afG3H13aF3w3HNKDlI5nTtnOwKRtKjwEpOZ/RBo7u4L3X0h0MLMfpDCtgcCy9z9Q3ffQSiFDC21jAOJrhhbEUopmff553DjjaHCsXRvkyIiDVQqdRCXuvumxBt3/xy4NIX1OgIfJb1fE01LNgG4wMzWEEoPP06a193M3jazV8ws9vmeZnaZmeWbWf6G5KdZVdbvfx+SxK23qiM1EZFIKgkiJ+peAyi+dFRTt4aOAh50907AmcBfo8ecrgO6RE+y+ynwNzPbo9N3d5/k7nnuntehqs9pWLkSJk6Eiy6C3Nyqfg4RkXonlWauzwNTzSxxS/H3gedSWG8tkHxxtlM0LdklwGAAd3/DzJoC7d39v8D2aPpcM1sOHAbU/AMfDjwQbrkl3OAkIiLFUilB/AKYCVweDe9S8sa5sswBephZdzPbGxgJTCu1zGrgVAAzO4LQnfgGM+sQlVQws4OBHsCHKeyz8po0gSuvDI80FBGRYqm0Yioys/8AhwDfBtoDT6SwXqGZ/Qh4gdCE9X53X2RmNwL57j4N+Blwj5ldSaiwHuPuHj2k6EYz2wkUAZe7+2dV/IwiIlIFZd4HYWaHEeoIRgGfAlOBq9y9a+bCS13aHjkqIlKPVfU+iCXAa8DZ7r4s2tCVaYhPRERqofLqIIYRWhO9bGb3mNmphDupRUSkASgzQbj70+4+EugJvAyMB/Yzs7vN7PRMBSgiItlRYSsmd//S3f8WPZu6E/A2oWWTiIjUY5V6irq7fx7dnHZqxUuLiEhdVqkEISIiDYcShIiIxFKCEBGRWEoQIiISSwlCRERiKUGIiEgsJQgREYmlBCEiIrGUIEREJJYShIiIxFKCEBGRWEoQIiISSwlCRERiKUGIiEgsJQgREYmlBCEiIrGUIEREJJYShIiIxFKCEBGRWEoQIiISSwlCRERiKUGIiEgsJQgREYmlBCEiIrHSmiDMbLCZLTWzZWZ2Tcz8Lmb2spm9bWYLzOzMpHnXRustNbNvpjNOERHZU+N0bdjMcoC7gNOANcAcM5vm7ouTFvsV8Ji7321mvYDpQLdofCTQGzgImGFmh7n7rnTFKyIiJaWzBDEQWObuH7r7DmAKMLTUMg7sG423Aj6OxocCU9x9u7uvAJZF2xMRkQxJZ4LoCHyU9H5NNC3ZBOACM1tDKD38uBLrYmaXmVm+meVv2LChpuIWERGyX0k9CnjQ3TsBZwJ/NbOUY3L3Se6e5+55HTp0SFuQIiINUdrqIIC1QOek952iackuAQYDuPsbZtYUaJ/iuiIikkbpLEHMAXqYWXcz25tQ6Tyt1DKrgVMBzOwIoCmwIVpupJk1MbPuQA/grTTGKiIipaStBOHuhWb2I+AFIAe4390XmdmNQL67TwN+BtxjZlcSKqzHuLsDi8zsMWAxUAj8UC2YREQyy8L5uO7Ly8vz/Pz8bIchIlKnmNlcd8+Lm5ftSmoREamllCBERCSWEoSIiMRSghARkVhKECIiEksJQkREYilBiIhILCUIERGJpQQhIiKxlCBERCSWEoSIiMRSghARkVjpfB6EiGTJzp07WbNmDdu2bct2KFJLNG3alE6dOrHXXnulvI4ShEg9tGbNGlq2bEm3bt0ws2yHI1nm7mzcuJE1a9bQvXv3lNfTJSaRemjbtm20a9dOyUEAMDPatWtX6RKlEoRIPaXkIMmq8n1QghARkVhKECICkydDt27QqFF4nTy5WpvbuHEjffv2pW/fvhxwwAF07Nix+P2OHTvKXTc/P58rrriiwn0ce+yx1YqxtPHjx9OxY0eKiopqdLt1mSqpRRq6yZPhssugoCC8X7UqvAcYPbpKm2zXrh3vvPMOABMmTKBFixZcddVVxfMLCwtp3Dj+9JOXl0deXuwTMEuYPcOMIckAABIPSURBVHt2lWKLU1RUxFNPPUXnzp155ZVXOPnkk2ts28nK+9y1kUoQIg3dddftTg4JBQVheg0aM2YMl19+OUcffTRXX301b731Fl//+tfp168fxx57LEuXLgVg1qxZnH322UBILmPHjmXQoEEcfPDBTJw4sXh7LVq0KF5+0KBBnH/++fTs2ZPRo0fj7gBMnz6dnj17MmDAAK644ori7ZY2a9Ysevfuzbhx43j00UeLp69fv55zzz2X3NxccnNzi5PSww8/zJFHHklubi4XXnhh8ef7+9//HhvfCSecwJAhQ+jVqxcA55xzDgMGDKB3795MmjSpeJ3nn3+e/v37k5uby6mnnkpRURE9evRgw4YNQEhkhx56aPH7dKs7qUxE0mP16spNr4Y1a9Ywe/ZscnJy+OKLL3jttddo3LgxM2bM4Je//CVPPPHEHussWbKEl19+mS1btnD44Yczbty4Pdryv/322yxatIiDDjqI4447jtdff528vDy+//3v8+qrr9K9e3dGjRpVZlyPPvooo0aNYujQofzyl79k586d7LXXXlxxxRWcdNJJPPXUU+zatYutW7eyaNEifve73zF79mzat2/PZ599VuHnnjdvHgsXLixuYnr//ffTtm1bvvrqK4466ijOO+88ioqKuPTSS4vj/eyzz2jUqBEXXHABkydPZvz48cyYMYPc3Fw6dOhQySNfNSpBiDR0XbpUbno1DB8+nJycHAA2b97M8OHD+drXvsaVV17JokWLYtc566yzaNKkCe3bt2e//fZj/fr1eywzcOBAOnXqRKNGjejbty8rV65kyZIlHHzwwcUn5bISxI4dO5g+fTrnnHMO++67L0cffTQvvPACADNnzmTcuHEA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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see that the validation accuracy increases upto 6 epochs (Validation acc = 88.96%) and starts decreasing afetr that which means that the model starts overfitting after 6 epochs.\n",
        "\n",
        "Let's train a new network from scratch for six epochs, then evaluate it on our test data:"
      ],
      "metadata": {
        "id": "2Nw-VZjFSgXq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oO3r6JlwSkIV",
        "outputId": "2b8c1bfb-b550-46e9-a876-59efa9815285"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.4701 - accuracy: 0.8152\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.2649 - accuracy: 0.9090\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.2018 - accuracy: 0.9298\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 12ms/step - loss: 0.1708 - accuracy: 0.9410\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1418 - accuracy: 0.9527\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1248 - accuracy: 0.9566\n",
            "782/782 [==============================] - 2s 3ms/step - loss: 0.3311 - accuracy: 0.8764\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "results\n",
        "\n",
        "# So, we acheived an accuracy of 87.8% using two hidden layers with 16 neurons in each layer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YpYffhXHTmeQ",
        "outputId": "d7c5f644-49b9-436b-c832-e31876302b38"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.331055223941803, 0.8764399886131287]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Using the trained network to generate predictions on new data\n",
        "\n",
        "model.predict(x_test)\n",
        "\n",
        "#Note: The results below gives the probability of each reveiw being \"Positive\""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fxGFZQ6fTp_r",
        "outputId": "a3d9f0fa-4e36-4c0f-d6af-e1ca7c56ff00"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0.13432159],\n",
              "       [0.9999944 ],\n",
              "       [0.8786987 ],\n",
              "       ...,\n",
              "       [0.14237131],\n",
              "       [0.04770594],\n",
              "       [0.7759137 ]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 3 hidden layers"
      ],
      "metadata": {
        "id": "NEeRRdtiUJRm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ck4a7IWCT6P2",
        "outputId": "f3f24ff8-e4e0-474c-8089-48c371a67125"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 48ms/step - loss: 0.5172 - binary_accuracy: 0.7785 - val_loss: 0.3826 - val_binary_accuracy: 0.8610\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.2862 - binary_accuracy: 0.9054 - val_loss: 0.2895 - val_binary_accuracy: 0.8892\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.2014 - binary_accuracy: 0.9312 - val_loss: 0.3386 - val_binary_accuracy: 0.8625\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1597 - binary_accuracy: 0.9459 - val_loss: 0.3025 - val_binary_accuracy: 0.8826\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1257 - binary_accuracy: 0.9579 - val_loss: 0.4044 - val_binary_accuracy: 0.8551\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1039 - binary_accuracy: 0.9667 - val_loss: 0.3227 - val_binary_accuracy: 0.8842\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0847 - binary_accuracy: 0.9749 - val_loss: 0.3531 - val_binary_accuracy: 0.8796\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0746 - binary_accuracy: 0.9763 - val_loss: 0.3822 - val_binary_accuracy: 0.8793\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0600 - binary_accuracy: 0.9811 - val_loss: 0.4102 - val_binary_accuracy: 0.8783\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0493 - binary_accuracy: 0.9857 - val_loss: 0.4502 - val_binary_accuracy: 0.8741\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0322 - binary_accuracy: 0.9924 - val_loss: 0.5768 - val_binary_accuracy: 0.8562\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0369 - binary_accuracy: 0.9891 - val_loss: 0.5085 - val_binary_accuracy: 0.8718\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0190 - binary_accuracy: 0.9957 - val_loss: 0.5703 - val_binary_accuracy: 0.8665\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0269 - binary_accuracy: 0.9921 - val_loss: 0.6045 - val_binary_accuracy: 0.8683\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0080 - binary_accuracy: 0.9994 - val_loss: 0.6213 - val_binary_accuracy: 0.8681\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0229 - binary_accuracy: 0.9937 - val_loss: 0.6591 - val_binary_accuracy: 0.8675\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0043 - binary_accuracy: 0.9997 - val_loss: 0.6935 - val_binary_accuracy: 0.8670\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0167 - binary_accuracy: 0.9951 - val_loss: 0.7300 - val_binary_accuracy: 0.8677\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0025 - binary_accuracy: 0.9999 - val_loss: 0.7600 - val_binary_accuracy: 0.8650\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0177 - binary_accuracy: 0.9945 - val_loss: 0.8085 - val_binary_accuracy: 0.8638\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 2s 13ms/step - loss: 0.4936 - accuracy: 0.7973\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.2731 - accuracy: 0.9064\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.2045 - accuracy: 0.9270\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1645 - accuracy: 0.9407\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.1392 - accuracy: 0.9522\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1192 - accuracy: 0.9593\n",
            "782/782 [==============================] - 3s 3ms/step - loss: 0.3452 - accuracy: 0.8755\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.34516945481300354, 0.8754799962043762]"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 5 hidden layer in the model"
      ],
      "metadata": {
        "id": "7QgRzk85UO0w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(16, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "MdsHlAq6US0v",
        "outputId": "52d2259c-f481-4318-c9e6-4ae152040898"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 28ms/step - loss: 0.5658 - binary_accuracy: 0.7545 - val_loss: 0.4102 - val_binary_accuracy: 0.8703\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.3259 - binary_accuracy: 0.8931 - val_loss: 0.3130 - val_binary_accuracy: 0.8776\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.2143 - binary_accuracy: 0.9293 - val_loss: 0.2857 - val_binary_accuracy: 0.8886\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.1577 - binary_accuracy: 0.9477 - val_loss: 0.3713 - val_binary_accuracy: 0.8646\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.1234 - binary_accuracy: 0.9594 - val_loss: 0.3443 - val_binary_accuracy: 0.8765\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0951 - binary_accuracy: 0.9709 - val_loss: 0.4280 - val_binary_accuracy: 0.8595\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0888 - binary_accuracy: 0.9697 - val_loss: 0.3736 - val_binary_accuracy: 0.8813\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0708 - binary_accuracy: 0.9793 - val_loss: 0.4090 - val_binary_accuracy: 0.8790\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0298 - binary_accuracy: 0.9947 - val_loss: 0.5061 - val_binary_accuracy: 0.8645\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0404 - binary_accuracy: 0.9887 - val_loss: 0.6500 - val_binary_accuracy: 0.8494\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0389 - binary_accuracy: 0.9890 - val_loss: 0.5873 - val_binary_accuracy: 0.8621\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0101 - binary_accuracy: 0.9982 - val_loss: 0.5767 - val_binary_accuracy: 0.8729\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0348 - binary_accuracy: 0.9899 - val_loss: 0.6082 - val_binary_accuracy: 0.8718\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0043 - binary_accuracy: 0.9995 - val_loss: 0.6550 - val_binary_accuracy: 0.8704\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0026 - binary_accuracy: 0.9997 - val_loss: 0.7475 - val_binary_accuracy: 0.8665\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0400 - binary_accuracy: 0.9913 - val_loss: 0.7821 - val_binary_accuracy: 0.8707\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 9.9663e-04 - binary_accuracy: 0.9999 - val_loss: 0.8105 - val_binary_accuracy: 0.8696\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 7.5010e-04 - binary_accuracy: 0.9999 - val_loss: 0.8633 - val_binary_accuracy: 0.8682\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 4.5981e-04 - binary_accuracy: 0.9999 - val_loss: 1.0048 - val_binary_accuracy: 0.8642\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 19ms/step - loss: 0.0467 - binary_accuracy: 0.9935 - val_loss: 1.0234 - val_binary_accuracy: 0.8677\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 1s 15ms/step - loss: 0.4552 - accuracy: 0.8247\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.2824 - accuracy: 0.9065\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 15ms/step - loss: 0.2237 - accuracy: 0.9232\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 15ms/step - loss: 0.1904 - accuracy: 0.9356\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.1680 - accuracy: 0.9428\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 16ms/step - loss: 0.1501 - accuracy: 0.9497\n",
            "782/782 [==============================] - 1s 1ms/step - loss: 0.2946 - accuracy: 0.8838\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.29458096623420715, 0.8837599754333496]"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 2 hidden layers with 32 neurons in each layer"
      ],
      "metadata": {
        "id": "qV-SGwAOYHGL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(32, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(32, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(32, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(32, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VIhDKVOFYLVj",
        "outputId": "0e8fcec6-d313-424b-ecc3-d5b5277d8ace"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 1s 31ms/step - loss: 0.4887 - binary_accuracy: 0.7751 - val_loss: 0.3418 - val_binary_accuracy: 0.8789\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.2674 - binary_accuracy: 0.9083 - val_loss: 0.2850 - val_binary_accuracy: 0.8892\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 0.1965 - binary_accuracy: 0.9337 - val_loss: 0.2806 - val_binary_accuracy: 0.8871\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.1496 - binary_accuracy: 0.9493 - val_loss: 0.2992 - val_binary_accuracy: 0.8811\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.1211 - binary_accuracy: 0.9609 - val_loss: 0.4056 - val_binary_accuracy: 0.8531\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 26ms/step - loss: 0.0985 - binary_accuracy: 0.9692 - val_loss: 0.3253 - val_binary_accuracy: 0.8842\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0769 - binary_accuracy: 0.9766 - val_loss: 0.4020 - val_binary_accuracy: 0.8674\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0636 - binary_accuracy: 0.9811 - val_loss: 0.3842 - val_binary_accuracy: 0.8779\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0473 - binary_accuracy: 0.9875 - val_loss: 0.5198 - val_binary_accuracy: 0.8563\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0485 - binary_accuracy: 0.9855 - val_loss: 0.4457 - val_binary_accuracy: 0.8758\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0203 - binary_accuracy: 0.9972 - val_loss: 0.4865 - val_binary_accuracy: 0.8722\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0249 - binary_accuracy: 0.9935 - val_loss: 0.5195 - val_binary_accuracy: 0.8698\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0278 - binary_accuracy: 0.9925 - val_loss: 0.5520 - val_binary_accuracy: 0.8712\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0073 - binary_accuracy: 0.9996 - val_loss: 0.6280 - val_binary_accuracy: 0.8632\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0180 - binary_accuracy: 0.9955 - val_loss: 0.6199 - val_binary_accuracy: 0.8695\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0039 - binary_accuracy: 0.9999 - val_loss: 0.6540 - val_binary_accuracy: 0.8685\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0148 - binary_accuracy: 0.9958 - val_loss: 0.6842 - val_binary_accuracy: 0.8695\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0022 - binary_accuracy: 0.9999 - val_loss: 0.7203 - val_binary_accuracy: 0.8672\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 24ms/step - loss: 0.0133 - binary_accuracy: 0.9962 - val_loss: 0.7534 - val_binary_accuracy: 0.8658\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 25ms/step - loss: 0.0013 - binary_accuracy: 0.9999 - val_loss: 0.7830 - val_binary_accuracy: 0.8656\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 1s 19ms/step - loss: 0.4292 - accuracy: 0.8248\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 19ms/step - loss: 0.2461 - accuracy: 0.9097\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 19ms/step - loss: 0.1893 - accuracy: 0.9319\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 20ms/step - loss: 0.1597 - accuracy: 0.9412\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 19ms/step - loss: 0.1365 - accuracy: 0.9505\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 19ms/step - loss: 0.1172 - accuracy: 0.9582\n",
            "782/782 [==============================] - 2s 2ms/step - loss: 0.4317 - accuracy: 0.8572\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4317082464694977, 0.8571599721908569]"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 2 hidden layers with 64 neurons in each hidden layer"
      ],
      "metadata": {
        "id": "w9WS8yDFYjZ9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Ec4gornLYl16",
        "outputId": "bd324360-3a87-458e-eb4c-e197dd86b7c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 43ms/step - loss: 0.4771 - binary_accuracy: 0.7649 - val_loss: 0.3087 - val_binary_accuracy: 0.8879\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.2612 - binary_accuracy: 0.9012 - val_loss: 0.2839 - val_binary_accuracy: 0.8855\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.1937 - binary_accuracy: 0.9288 - val_loss: 0.2762 - val_binary_accuracy: 0.8878\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.1306 - binary_accuracy: 0.9560 - val_loss: 0.3701 - val_binary_accuracy: 0.8661\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.1189 - binary_accuracy: 0.9572 - val_loss: 0.3151 - val_binary_accuracy: 0.8849\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0803 - binary_accuracy: 0.9747 - val_loss: 0.4000 - val_binary_accuracy: 0.8679\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0744 - binary_accuracy: 0.9764 - val_loss: 0.3911 - val_binary_accuracy: 0.8759\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0540 - binary_accuracy: 0.9835 - val_loss: 0.4109 - val_binary_accuracy: 0.8816\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0314 - binary_accuracy: 0.9908 - val_loss: 0.5582 - val_binary_accuracy: 0.8557\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0151 - binary_accuracy: 0.9977 - val_loss: 0.5323 - val_binary_accuracy: 0.8704\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0435 - binary_accuracy: 0.9887 - val_loss: 0.5356 - val_binary_accuracy: 0.8758\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0048 - binary_accuracy: 0.9999 - val_loss: 0.5942 - val_binary_accuracy: 0.8743\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0342 - binary_accuracy: 0.9899 - val_loss: 0.6153 - val_binary_accuracy: 0.8741\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0022 - binary_accuracy: 0.9999 - val_loss: 0.6565 - val_binary_accuracy: 0.8734\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0015 - binary_accuracy: 0.9999 - val_loss: 0.7255 - val_binary_accuracy: 0.8720\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0367 - binary_accuracy: 0.9908 - val_loss: 0.7603 - val_binary_accuracy: 0.8730\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 5.7394e-04 - binary_accuracy: 1.0000 - val_loss: 0.7865 - val_binary_accuracy: 0.8723\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 35ms/step - loss: 4.3391e-04 - binary_accuracy: 1.0000 - val_loss: 0.8279 - val_binary_accuracy: 0.8707\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 2.9341e-04 - binary_accuracy: 1.0000 - val_loss: 0.9104 - val_binary_accuracy: 0.8686\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0352 - binary_accuracy: 0.9932 - val_loss: 0.9426 - val_binary_accuracy: 0.8714\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 2s 28ms/step - loss: 0.4218 - accuracy: 0.8120\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.2354 - accuracy: 0.9107\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1813 - accuracy: 0.9308\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1493 - accuracy: 0.9440\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1176 - accuracy: 0.9571\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.0886 - accuracy: 0.9688\n",
            "782/782 [==============================] - 2s 2ms/step - loss: 0.3866 - accuracy: 0.8712\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.3865947723388672, 0.8712400197982788]"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 2 hidden layers with 128 neurons in each hidden layer"
      ],
      "metadata": {
        "id": "ZZDnW9OWZP7K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(128, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(128, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(128, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "GWYfFOyhZQtI",
        "outputId": "585c143d-933c-486e-c0fb-d3092518100b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 66ms/step - loss: 0.4784 - binary_accuracy: 0.7775 - val_loss: 0.4042 - val_binary_accuracy: 0.8260\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.2545 - binary_accuracy: 0.9015 - val_loss: 0.3282 - val_binary_accuracy: 0.8652\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 2s 58ms/step - loss: 0.1741 - binary_accuracy: 0.9345 - val_loss: 0.2759 - val_binary_accuracy: 0.8902\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 0.1179 - binary_accuracy: 0.9579 - val_loss: 0.3521 - val_binary_accuracy: 0.8773\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0779 - binary_accuracy: 0.9735 - val_loss: 0.4780 - val_binary_accuracy: 0.8555\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0770 - binary_accuracy: 0.9765 - val_loss: 0.3581 - val_binary_accuracy: 0.8836\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 2s 58ms/step - loss: 0.0141 - binary_accuracy: 0.9978 - val_loss: 0.4931 - val_binary_accuracy: 0.8783\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0709 - binary_accuracy: 0.9820 - val_loss: 0.4440 - val_binary_accuracy: 0.8815\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0044 - binary_accuracy: 0.9997 - val_loss: 0.5387 - val_binary_accuracy: 0.8807\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0684 - binary_accuracy: 0.9863 - val_loss: 0.5193 - val_binary_accuracy: 0.8794\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 0.0019 - binary_accuracy: 0.9999 - val_loss: 0.5879 - val_binary_accuracy: 0.8804\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 9.3911e-04 - binary_accuracy: 0.9999 - val_loss: 0.6658 - val_binary_accuracy: 0.8793\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 3.7727e-04 - binary_accuracy: 1.0000 - val_loss: 0.7783 - val_binary_accuracy: 0.8776\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 2s 61ms/step - loss: 0.0851 - binary_accuracy: 0.9871 - val_loss: 0.7955 - val_binary_accuracy: 0.8709\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 2.7792e-04 - binary_accuracy: 1.0000 - val_loss: 0.7747 - val_binary_accuracy: 0.8753\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 1.2419e-04 - binary_accuracy: 1.0000 - val_loss: 0.8121 - val_binary_accuracy: 0.8755\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 6.4949e-05 - binary_accuracy: 1.0000 - val_loss: 0.8709 - val_binary_accuracy: 0.8771\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 3.2626e-05 - binary_accuracy: 1.0000 - val_loss: 0.9572 - val_binary_accuracy: 0.8756\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 2s 59ms/step - loss: 1.3124e-05 - binary_accuracy: 1.0000 - val_loss: 1.0487 - val_binary_accuracy: 0.8754\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 2s 60ms/step - loss: 4.1596e-06 - binary_accuracy: 1.0000 - val_loss: 1.1662 - val_binary_accuracy: 0.8753\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 3s 47ms/step - loss: 0.4360 - accuracy: 0.8057\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 2s 48ms/step - loss: 0.2300 - accuracy: 0.9120\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 2s 48ms/step - loss: 0.1711 - accuracy: 0.9354\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 2s 47ms/step - loss: 0.1202 - accuracy: 0.9534\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 2s 47ms/step - loss: 0.0713 - accuracy: 0.9762\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 2s 47ms/step - loss: 0.0499 - accuracy: 0.9850\n",
            "782/782 [==============================] - 3s 3ms/step - loss: 0.4753 - accuracy: 0.8756\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.47527527809143066, 0.8755999803543091]"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using 2 hidden layers with 256 neurons in each layer"
      ],
      "metadata": {
        "id": "zVyt00FkdkJF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(256, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(256, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(256, activation='relu', input_shape=(10000,)))\n",
        "model.add(layers.Dense(256, activation='relu'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "_DDzTdNSdnDS",
        "outputId": "626f83db-4ed3-446d-980b-2a9864f54e6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 4s 121ms/step - loss: 0.5097 - binary_accuracy: 0.7685 - val_loss: 0.3080 - val_binary_accuracy: 0.8798\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 3s 108ms/step - loss: 0.2560 - binary_accuracy: 0.8980 - val_loss: 0.2813 - val_binary_accuracy: 0.8838\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 3s 105ms/step - loss: 0.1612 - binary_accuracy: 0.9383 - val_loss: 0.2899 - val_binary_accuracy: 0.8894\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 3s 107ms/step - loss: 0.1052 - binary_accuracy: 0.9655 - val_loss: 0.3282 - val_binary_accuracy: 0.8892\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 3s 104ms/step - loss: 0.0809 - binary_accuracy: 0.9765 - val_loss: 0.3542 - val_binary_accuracy: 0.8851\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 0.0144 - binary_accuracy: 0.9974 - val_loss: 1.4879 - val_binary_accuracy: 0.7217\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 3s 107ms/step - loss: 0.0442 - binary_accuracy: 0.9886 - val_loss: 0.4928 - val_binary_accuracy: 0.8850\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 3s 108ms/step - loss: 0.0015 - binary_accuracy: 0.9999 - val_loss: 0.6020 - val_binary_accuracy: 0.8840\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 3.2167e-04 - binary_accuracy: 1.0000 - val_loss: 0.9302 - val_binary_accuracy: 0.8666\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 0.1510 - binary_accuracy: 0.9839 - val_loss: 0.6093 - val_binary_accuracy: 0.8794\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 3s 107ms/step - loss: 2.5834e-04 - binary_accuracy: 1.0000 - val_loss: 0.6612 - val_binary_accuracy: 0.8796\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 1.1840e-04 - binary_accuracy: 1.0000 - val_loss: 0.7412 - val_binary_accuracy: 0.8800\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 3s 105ms/step - loss: 4.6331e-05 - binary_accuracy: 1.0000 - val_loss: 0.8378 - val_binary_accuracy: 0.8806\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 3s 105ms/step - loss: 1.4220e-05 - binary_accuracy: 1.0000 - val_loss: 0.9429 - val_binary_accuracy: 0.8802\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 3s 107ms/step - loss: 3.6027e-06 - binary_accuracy: 1.0000 - val_loss: 1.0522 - val_binary_accuracy: 0.8789\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 3s 107ms/step - loss: 9.7151e-07 - binary_accuracy: 1.0000 - val_loss: 1.1346 - val_binary_accuracy: 0.8796\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 3.2436e-07 - binary_accuracy: 1.0000 - val_loss: 1.2207 - val_binary_accuracy: 0.8802\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 1.1263e-07 - binary_accuracy: 1.0000 - val_loss: 1.2920 - val_binary_accuracy: 0.8786\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 3s 106ms/step - loss: 5.2341e-08 - binary_accuracy: 1.0000 - val_loss: 1.3364 - val_binary_accuracy: 0.8790\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 3s 108ms/step - loss: 3.0315e-08 - binary_accuracy: 1.0000 - val_loss: 1.3708 - val_binary_accuracy: 0.8790\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 5s 84ms/step - loss: 0.4424 - accuracy: 0.8020\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 4s 84ms/step - loss: 0.2257 - accuracy: 0.9123\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 4s 84ms/step - loss: 0.1572 - accuracy: 0.9392\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 4s 83ms/step - loss: 0.0939 - accuracy: 0.9664\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 4s 84ms/step - loss: 0.0491 - accuracy: 0.9850\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 4s 84ms/step - loss: 0.0540 - accuracy: 0.9890\n",
            "782/782 [==============================] - 4s 5ms/step - loss: 0.5218 - accuracy: 0.8772\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.5218093991279602, 0.8771600127220154]"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using tanh activation function instead of relu ( 2 hidden layers with 64 neurons in each layer)"
      ],
      "metadata": {
        "id": "XsKI4v2BU2yO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='tanh', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='tanh'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='tanh', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='tanh'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ohkChqg5U8Dc",
        "outputId": "da393f89-8832-4b59-e23e-e4a5cffe8ae5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 3s 85ms/step - loss: 0.4734 - binary_accuracy: 0.7831 - val_loss: 0.3014 - val_binary_accuracy: 0.8816\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.2327 - binary_accuracy: 0.9088 - val_loss: 0.2856 - val_binary_accuracy: 0.8820\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.1737 - binary_accuracy: 0.9327 - val_loss: 0.2954 - val_binary_accuracy: 0.8842\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.1346 - binary_accuracy: 0.9509 - val_loss: 0.4066 - val_binary_accuracy: 0.8578\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0975 - binary_accuracy: 0.9650 - val_loss: 0.3930 - val_binary_accuracy: 0.8788\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0818 - binary_accuracy: 0.9720 - val_loss: 0.4320 - val_binary_accuracy: 0.8700\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0757 - binary_accuracy: 0.9735 - val_loss: 0.6217 - val_binary_accuracy: 0.8478\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0652 - binary_accuracy: 0.9799 - val_loss: 0.4946 - val_binary_accuracy: 0.8668\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0340 - binary_accuracy: 0.9905 - val_loss: 0.7894 - val_binary_accuracy: 0.8336\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0191 - binary_accuracy: 0.9950 - val_loss: 0.6505 - val_binary_accuracy: 0.8640\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0465 - binary_accuracy: 0.9879 - val_loss: 0.6729 - val_binary_accuracy: 0.8627\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0451 - binary_accuracy: 0.9883 - val_loss: 0.6782 - val_binary_accuracy: 0.8630\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0044 - binary_accuracy: 0.9997 - val_loss: 0.7438 - val_binary_accuracy: 0.8623\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0575 - binary_accuracy: 0.9895 - val_loss: 0.7921 - val_binary_accuracy: 0.8622\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0016 - binary_accuracy: 0.9999 - val_loss: 0.8263 - val_binary_accuracy: 0.8604\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 8.7841e-04 - binary_accuracy: 1.0000 - val_loss: 0.9096 - val_binary_accuracy: 0.8587\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0773 - binary_accuracy: 0.9881 - val_loss: 0.9454 - val_binary_accuracy: 0.8589\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 4.2185e-04 - binary_accuracy: 1.0000 - val_loss: 0.9579 - val_binary_accuracy: 0.8582\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 2.6794e-04 - binary_accuracy: 1.0000 - val_loss: 0.9871 - val_binary_accuracy: 0.8563\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 1.6438e-04 - binary_accuracy: 1.0000 - val_loss: 1.0622 - val_binary_accuracy: 0.8565\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 2s 31ms/step - loss: 0.3949 - accuracy: 0.8296\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.2210 - accuracy: 0.9132\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1761 - accuracy: 0.9320\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1530 - accuracy: 0.9413\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.1360 - accuracy: 0.9493\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 2s 36ms/step - loss: 0.1209 - accuracy: 0.9541\n",
            "782/782 [==============================] - 2s 2ms/step - loss: 0.4398 - accuracy: 0.8527\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.439768522977829, 0.8526800274848938]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Using tanh activation function and MSE loss function with 2 hidden layers and 64 neurons in each layer"
      ],
      "metadata": {
        "id": "8EFXJ4J1WTCt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='tanh', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='tanh'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='MSE',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.MSE,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='tanh', input_shape=(10000,)))\n",
        "model.add(layers.Dense(64, activation='tanh'))\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='MSE',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=4, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "AewqEaZwWTzw",
        "outputId": "78f642c8-4b27-4b33-ef10-3bd4cd848606"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 44ms/step - loss: 0.1494 - binary_accuracy: 0.7866 - val_loss: 0.1031 - val_binary_accuracy: 0.8614\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0700 - binary_accuracy: 0.9103 - val_loss: 0.0865 - val_binary_accuracy: 0.8820\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0512 - binary_accuracy: 0.9353 - val_loss: 0.0854 - val_binary_accuracy: 0.8861\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0387 - binary_accuracy: 0.9529 - val_loss: 0.1009 - val_binary_accuracy: 0.8703\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0312 - binary_accuracy: 0.9621 - val_loss: 0.1099 - val_binary_accuracy: 0.8622\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0243 - binary_accuracy: 0.9714 - val_loss: 0.1101 - val_binary_accuracy: 0.8679\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0244 - binary_accuracy: 0.9709 - val_loss: 0.1034 - val_binary_accuracy: 0.8761\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0181 - binary_accuracy: 0.9801 - val_loss: 0.1080 - val_binary_accuracy: 0.8712\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0191 - binary_accuracy: 0.9775 - val_loss: 0.1092 - val_binary_accuracy: 0.8694\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0154 - binary_accuracy: 0.9821 - val_loss: 0.1122 - val_binary_accuracy: 0.8694\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0153 - binary_accuracy: 0.9823 - val_loss: 0.1136 - val_binary_accuracy: 0.8697\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 38ms/step - loss: 0.0126 - binary_accuracy: 0.9857 - val_loss: 0.1213 - val_binary_accuracy: 0.8618\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0129 - binary_accuracy: 0.9857 - val_loss: 0.1145 - val_binary_accuracy: 0.8708\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0094 - binary_accuracy: 0.9896 - val_loss: 0.1322 - val_binary_accuracy: 0.8538\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0071 - binary_accuracy: 0.9926 - val_loss: 0.1187 - val_binary_accuracy: 0.8673\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 39ms/step - loss: 0.0142 - binary_accuracy: 0.9845 - val_loss: 0.1186 - val_binary_accuracy: 0.8685\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 35ms/step - loss: 0.0124 - binary_accuracy: 0.9857 - val_loss: 0.1187 - val_binary_accuracy: 0.8662\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 37ms/step - loss: 0.0063 - binary_accuracy: 0.9937 - val_loss: 0.1200 - val_binary_accuracy: 0.8676\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0061 - binary_accuracy: 0.9939 - val_loss: 0.1216 - val_binary_accuracy: 0.8659\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 36ms/step - loss: 0.0061 - binary_accuracy: 0.9939 - val_loss: 0.1222 - val_binary_accuracy: 0.8654\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/4\n",
            "49/49 [==============================] - 2s 28ms/step - loss: 0.1299 - accuracy: 0.8153\n",
            "Epoch 2/4\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.0679 - accuracy: 0.9088\n",
            "Epoch 3/4\n",
            "49/49 [==============================] - 1s 28ms/step - loss: 0.0536 - accuracy: 0.9309\n",
            "Epoch 4/4\n",
            "49/49 [==============================] - 1s 27ms/step - loss: 0.0449 - accuracy: 0.9428\n",
            "782/782 [==============================] - 2s 2ms/step - loss: 0.0970 - accuracy: 0.8745\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.09695704281330109, 0.8745200037956238]"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Using 2 dropout layers (p=0.5) with 2 hidden layers of 64 neurons in each layer"
      ],
      "metadata": {
        "id": "OLzEZnrgbSAg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras import models\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "layers.Dropout(0.5),\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "layers.Dropout(0.5),\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "from keras import optimizers\n",
        "from keras import losses\n",
        "from keras import metrics\n",
        "\n",
        "from tensorflow import keras\n",
        "from keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras import optimizers\n",
        "\n",
        "model.compile(optimizer=optimizers.RMSprop(learning_rate=0.001),\n",
        "              loss = losses.binary_crossentropy,\n",
        "              metrics = [metrics.binary_accuracy])\n",
        "\n",
        "x_val = x_train[:10000]\n",
        "partial_x_train = x_train[10000:]\n",
        "\n",
        "y_val = y_train[:10000]\n",
        "partial_y_train = y_train[10000:]\n",
        "\n",
        "history = model.fit(partial_x_train,\n",
        "                    partial_y_train,\n",
        "                    epochs=20,\n",
        "                    batch_size=512,\n",
        "                    validation_data=(x_val, y_val))\n",
        "\n",
        "history_dict = history.history\n",
        "history_dict.keys()\n",
        "\n",
        "# Plotting the training and validation loss\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "loss_values = history_dict['loss']\n",
        "val_loss_values = history_dict['val_loss']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, loss_values, 'bo', label=\"Training Loss\")\n",
        "plt.plot(epochs, val_loss_values, 'b', label=\"Validation Loss\")\n",
        "\n",
        "plt.title('Training and Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss Value')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "# Plotting the training and validation accuracy\n",
        "# Training and Validation Accuracy\n",
        "\n",
        "acc_values = history_dict['binary_accuracy']\n",
        "val_acc_values = history_dict['val_binary_accuracy']\n",
        "\n",
        "epochs = range(1, len(loss_values) + 1)\n",
        "\n",
        "plt.plot(epochs, acc_values, 'ro', label=\"Training Accuracy\")\n",
        "plt.plot(epochs, val_acc_values, 'r', label=\"Validation Accuracy\")\n",
        "\n",
        "plt.title('Training and Validation Accuraccy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "\n",
        "model = models.Sequential()\n",
        "model.add(layers.Dense(64, activation='relu', input_shape=(10000,)))\n",
        "layers.Dropout(0.5),\n",
        "model.add(layers.Dense(64, activation='relu'))\n",
        "layers.Dropout(0.5),\n",
        "model.add(layers.Dense(1, activation='sigmoid'))\n",
        "\n",
        "model.compile(optimizer='rmsprop',\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(x_train, y_train, epochs=6, batch_size=512)\n",
        "results = model.evaluate(x_test, y_test)\n",
        "\n",
        "results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "J7LKDiUCbjrc",
        "outputId": "5a505c11-a9e2-420d-8959-203f88f32327"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "30/30 [==============================] - 2s 41ms/step - loss: 0.4894 - binary_accuracy: 0.7727 - val_loss: 0.3339 - val_binary_accuracy: 0.8756\n",
            "Epoch 2/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.2611 - binary_accuracy: 0.9045 - val_loss: 0.2746 - val_binary_accuracy: 0.8924\n",
            "Epoch 3/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1927 - binary_accuracy: 0.9286 - val_loss: 0.3262 - val_binary_accuracy: 0.8679\n",
            "Epoch 4/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1349 - binary_accuracy: 0.9539 - val_loss: 0.2950 - val_binary_accuracy: 0.8849\n",
            "Epoch 5/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.1028 - binary_accuracy: 0.9652 - val_loss: 0.3855 - val_binary_accuracy: 0.8635\n",
            "Epoch 6/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0819 - binary_accuracy: 0.9724 - val_loss: 0.3470 - val_binary_accuracy: 0.8808\n",
            "Epoch 7/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0535 - binary_accuracy: 0.9844 - val_loss: 0.3834 - val_binary_accuracy: 0.8788\n",
            "Epoch 8/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0440 - binary_accuracy: 0.9867 - val_loss: 0.4111 - val_binary_accuracy: 0.8781\n",
            "Epoch 9/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0138 - binary_accuracy: 0.9983 - val_loss: 0.4765 - val_binary_accuracy: 0.8767\n",
            "Epoch 10/20\n",
            "30/30 [==============================] - 1s 22ms/step - loss: 0.0432 - binary_accuracy: 0.9875 - val_loss: 0.4919 - val_binary_accuracy: 0.8758\n",
            "Epoch 11/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0048 - binary_accuracy: 0.9998 - val_loss: 0.5434 - val_binary_accuracy: 0.8742\n",
            "Epoch 12/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0393 - binary_accuracy: 0.9892 - val_loss: 0.5727 - val_binary_accuracy: 0.8738\n",
            "Epoch 13/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0018 - binary_accuracy: 1.0000 - val_loss: 0.6081 - val_binary_accuracy: 0.8740\n",
            "Epoch 14/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0012 - binary_accuracy: 1.0000 - val_loss: 0.6655 - val_binary_accuracy: 0.8745\n",
            "Epoch 15/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 6.7812e-04 - binary_accuracy: 1.0000 - val_loss: 0.7624 - val_binary_accuracy: 0.8700\n",
            "Epoch 16/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 0.0348 - binary_accuracy: 0.9925 - val_loss: 0.7423 - val_binary_accuracy: 0.8711\n",
            "Epoch 17/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 3.0293e-04 - binary_accuracy: 1.0000 - val_loss: 0.7764 - val_binary_accuracy: 0.8721\n",
            "Epoch 18/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 2.0627e-04 - binary_accuracy: 1.0000 - val_loss: 0.8240 - val_binary_accuracy: 0.8720\n",
            "Epoch 19/20\n",
            "30/30 [==============================] - 1s 21ms/step - loss: 1.2751e-04 - binary_accuracy: 1.0000 - val_loss: 0.8959 - val_binary_accuracy: 0.8705\n",
            "Epoch 20/20\n",
            "30/30 [==============================] - 1s 20ms/step - loss: 0.0595 - binary_accuracy: 0.9916 - val_loss: 0.9477 - val_binary_accuracy: 0.8674\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.4220 - accuracy: 0.8127\n",
            "Epoch 2/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.2402 - accuracy: 0.9076\n",
            "Epoch 3/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1836 - accuracy: 0.9295\n",
            "Epoch 4/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.1435 - accuracy: 0.9480\n",
            "Epoch 5/6\n",
            "49/49 [==============================] - 1s 14ms/step - loss: 0.1100 - accuracy: 0.9603\n",
            "Epoch 6/6\n",
            "49/49 [==============================] - 1s 13ms/step - loss: 0.0891 - accuracy: 0.9678\n",
            "782/782 [==============================] - 4s 4ms/step - loss: 0.3886 - accuracy: 0.8723\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.38860949873924255, 0.8722800016403198]"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    }
  ]
}